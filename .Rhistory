select(.data$Unitid, .data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd)
`4` = "CRACE43",
`5` = "CRACE44",
`6` = "CRACE45",
`7` = "CRACE46",
`8` = "CRACE47",
`9` = "CRACE23",
.default = "ZRACEETH")
) %>%
tidyr::spread(key = .data$RaceEthnicity, value = .data$CountRE) %>%
#recode and spread Sex to get IPEDS columns
dplyr::mutate(Sex = recode(.data$Sex,
`1` = "CRACE15",
`2` = "CRACE16",
.default = "ZRACESEX")
) %>%
tidyr::spread(key = .data$Sex, value = .data$CountSex) %>%
#recode and spread Age to get IPEDS columns
dplyr::mutate(AgeGroup = case_when(
floor(.data$Age) < 18 ~ "AGE1",
floor(.data$Age) <= 24 ~ "AGE2",
floor(.data$Age) <= 39 ~ "AGE3",
floor(.data$Age) >= 40 ~ "AGE4",
is.na(.data$Age) ~ "AGE5",
TRUE ~ "AGE9"
)
) %>%
tidyr::spread(key = .data$AgeGroup, value = .data$CountAge) %>%
#aggregate and add counts in spread columns;
#extra award levels and dummy demographics have values of 0
dplyr::group_by(.data$Unitid, .data$CTLEVEL) %>%
dplyr::summarize(CRACE15 = sum(.data$CRACE15, na.rm = T),
CRACE16 = sum(.data$CRACE16, na.rm = T),
CRACE17 = sum(.data$CRACE17, na.rm = T),
CRACE41 = sum(.data$CRACE41, na.rm = T),
CRACE42 = sum(.data$CRACE42, na.rm = T),
CRACE43 = sum(.data$CRACE43, na.rm = T),
CRACE44 = sum(.data$CRACE44, na.rm = T),
CRACE45 = sum(.data$CRACE45, na.rm = T),
CRACE46 = sum(.data$CRACE46, na.rm = T),
CRACE47 = sum(.data$CRACE47, na.rm = T),
CRACE23 = sum(.data$CRACE23, na.rm = T),
AGE1 = sum(.data$AGE1, na.rm = T),
AGE2 = sum(.data$AGE2, na.rm = T),
AGE3 = sum(.data$AGE3, na.rm = T),
AGE4 = sum(.data$AGE4, na.rm = T),
AGE5 = sum(.data$AGE5, na.rm = T)
) %>%
dplyr::ungroup() %>%
#sort for easier viewing
dplyr::arrange(.data$CTLEVEL) %>%
#format for upload
dplyr::transmute(UNITID = paste0("UNITID=", .data$Unitid),
SURVSECT = "SURVSECT=COM",
PART = "PART=D",
CTLEVEL = paste0("CTLEVEL=", .data$CTLEVEL),
CRACE15 = paste0("CRACE15=", .data$CRACE15),
CRACE16 = paste0("CRACE16=", .data$CRACE16),
CRACE17 = paste0("CRACE17=", .data$CRACE17),
CRACE41 = paste0("CRACE41=", .data$CRACE41),
CRACE42 = paste0("CRACE42=", .data$CRACE42),
CRACE43 = paste0("CRACE43=", .data$CRACE43),
CRACE44 = paste0("CRACE44=", .data$CRACE44),
CRACE45 = paste0("CRACE45=", .data$CRACE45),
CRACE46 = paste0("CRACE46=", .data$CRACE46),
CRACE47 = paste0("CRACE47=", .data$CRACE47),
CRACE23 = paste0("CRACE23=", .data$CRACE23),
AGE1 = paste0("AGE1=", .data$AGE1),
AGE2 = paste0("AGE2=", .data$AGE2),
AGE3 = paste0("AGE3=", .data$AGE3),
AGE4 = paste0("AGE4=", .data$AGE4),
AGE5 = paste0("AGE5=", .data$AGE5)
)
df <- create_dummy_data_comp()
produce_com_report <- function(df, extracips = NULL, part = "ALL") {
students <- prep_com_data_frame(df = df)
if (!is.null(extracips)) {
extracips <- prep_com_data_frame(df = extracips)
}
if (toupper(part) == "ALL") {
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
}
if (toupper(part) %in% c("A", "B", "D")) {
do.call(paste0("make_com_part_", toupper(part)), list(students, extracips))
}
if (toupper(part) == "C") {
do.call(paste0("make_com_part_", toupper(part)), list(students))
}
}
produce_com_report(df = df, extracips = NULL, part = "D")
produce_com_report(df = df, extracips = NULL, part = "all")
devtools::load_all()
library(devtools)
produce_com_report(df = df, extracips = NULL, part = "all")
check()
document()
source('~/GitHub/IPEDSuploadables/R/write_report.R')
source('~/GitHub/IPEDSuploadables/R/create_dummy_data_gr.R')
df <- create_dummy_data_gr()
source('~/GitHub/IPEDSuploadables/R/produce_gr_report.R')
produce_gr_report(df)
devtools::load_all()
devtools::loadall()
source('~/GitHub/IPEDSuploadables/R/make_gr_part_C.R')
source('~/GitHub/IPEDSuploadables/R/make_gr_part_B.R')
produce_gr_report <- function(df, part = 'all'){
if(toupper(part) == 'ALL') {
make_gr_part_B(df, output = 'full')
make_gr_part_C(df, output = 'full')
}
if(part != 'all') {
do.call(paste0("make_gr_part_", toupper(part)), list(df))
}
}
produce_gr_report(df)
install.packages("dplyr")
install.packages("dplyr")
install.packages("tidyverse")
df
head(df)
stringr::str_glue_date("colnames(df)=")
stringr::str_glue_data("colnames(df)=")
stringr::str_glue_data("{colnames(df)}=")
df %>% stringr::str_glue_data(df2, "{colnames(df2)[1]}={df2[,1]}")
library(tidyverse)
df %>% stringr::str_glue_data(df2, "{colnames(df2)[1]}={df2[,1]}")
df %>% stringr::str_glue_data(df, "{colnames(df)[1]}={df[,1]}")
stringr::str_glue_data(df, "{colnames(df)[1]}={df[,1]}")
unite(df$Unitid,df$StudentId)
unite(df$Unitid,as.character(df$StudentId))
unite(as.character(df$Unitid),as.character(df$StudentId))
unite("new", as.character(df$Unitid):as.character(df$StudentId))
unite("new", Unitid):StudentId)
unite("new", Unitid:StudentId)
unite(df, "new", Unitid:StudentId)
df %>% mutate_all(newcolumn = str_glue_data("{colnames(df)[1]}={df[,1]}")) %>%
# mutate(newcolumn2 = str_glue_data(df2, "{colnames(df2)[2]}={df2[,2]}")) %>%
# unite(unifiedcolumn, newcolumn, newcolumn2, sep = ',', remove = F)
unite(col = allthecols, ., sep = ",")
df %>% mutate_all(newcolumn = str_glue_data("{.col}={df[,1]}")) %>%
# mutate(newcolumn2 = str_glue_data(df2, "{colnames(df2)[2]}={df2[,2]}")) %>%
# unite(unifiedcolumn, newcolumn, newcolumn2, sep = ',', remove = F)
unite(col = allthecols, ., sep = ",")
df %>% mutate_all(newcolumn = str_glue_data("{.col}={df[,1]}"))
df %>% mutate_all(newcolumn = str_glue_data(df,"{.col}={df[,1]}")) %>%
# mutate(newcolumn2 = str_glue_data(df2, "{colnames(df2)[2]}={df2[,2]}")) %>%
# unite(unifiedcolumn, newcolumn, newcolumn2, sep = ',', remove = F)
unite(col = allthecols, ., sep = ",")
map2_dfc(colnames(df), df, paste, sep = "=") %>% unite(col=allunited, ., sep = ',')
output_path
output_path <- getwd()
output_path
output_file_name <- "test"
map2_dfc(colnames(df), df, paste, sep = "=") %>%
unite(col = allunited, ., sep = ',') %>%
write.table(x = ., sep = ",",
file = paste0(output_path, output_file_name, "_", Sys.Date(), ".txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE)
output_path
paste0(output_path, output_file_name, "_", Sys.Date(), ".txt")
map2_dfc(colnames(df), df, paste, sep = "=") %>%
unite(col = allunited, ., sep = ',') %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "/", output_file_name, "_", Sys.Date(), ".txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE)
map2_dfc(colnames(df), df, paste, sep = "=") %>%
unite(col = allunited, ., sep = ',') %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "/", output_file_name, "_", Sys.Date(), ".txt"),
quote = FALSE, row.names = FALSE, col.names = FALSE)
library(readxl)
NSSE_First_Time_Takers_1145 <- read_excel("C:/Users/Shilerz/Downloads/NSSE First-Time Takers 1145.xlsx")
View(NSSE_First_Time_Takers_1145)
View(NSSE_First_Time_Takers_1145)
library(readxl)
df <- read_excel("C:/Users/Shilerz/Downloads/NSSE First-Time Takers 1145.xlsx")
View(df)
rm(NSSE_First_Time_Takers_1145)
library(ggplot2)
str(df)
summary(df)
df$Major
ggplot(df, aes(x = HIPS, y = GENDER)) +
geom_point()
names(df)
ggplot(df, aes(x = HIPs, y = GENDER)) +
geom_point()
ggplot(df, aes(x = HIPs, y = HO)) +
geom_point()
ggplot(df, aes(x = HO, y = HIPs)) +
geom_point()
ggplot(df, aes(x = HIPs, y = HO)) +
geom_line()
ggplot(df, aes(x = HIPs, y = HO)) +
geom_col()
ggplot(df, aes(x = HIPs, y = HO, color = GENDER)) +
geom_col()
View(df)
summary(df$HO)
60*1145
ggplot(df, aes(x = HIPs, y = mean(HO), color = GENDER)) +
geom_col()
df %>%
summarize(AVG_HO = mean(HO)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
library(dplyr)
library(tidyr)
df %>%
summarize(AVG_HO = mean(HO)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
summarize(AVG_HO = mean(HO))
df %>%
mutate(AVG_HO = mean(HO)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
mutate(AVG_HO = mean(HO))
df %>%
mutate(AVG_HO = mean(HO)) %>%
select(AVG_HO)
df %>%
mutate(AVG_HO = mean(HO)) %>%
select(AVG_HO) %>%
View()
df %>%
mutate(AVG_HO = mean(as.numeric(HO))) %>%
select(AVG_HO) %>%
View()
summary(df$HO)
?mean
df %>%
mutate(AVG_HO = mean(HO, na.rm = FALSE)) %>%
select(AVG_HO) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
mutate(AVG_HO = mean(HO, na.rm = FALSE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
mutate(AVG_HO = mean(HO, na.rm = FALSE))
df %>%
group_by(SurP) %>%
mutate(AVG_HO = mean(HO, na.rm = FALSE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(SurP) %>%
mutate(AVG_HO = mean(HO, na.rm = FALSE)) %>%
select(AVG_HO)
df %>%
group_by(SurP) %>%
summarize(AVG_HO = mean(HO, na.rm = FALSE)) %>%
select(AVG_HO)
df %>%
summarize(AVG_HO = mean(HO, na.rm = FALSE)) %>%
select(AVG_HO)
df %>%
summarize(AVG_HO = mean(HO, na.rm = TRUE)) %>%
select(AVG_HO)
df %>%
summarize(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(HIPS) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = average(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_bar()
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_col()
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE))
df %>%
group_by(HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HIPs, y = AVG_HO, color = GENDER)) +
geom_point()
df %>%
group_by(GENDER) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_point()
df %>%
group_by(GENDER) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_col()
df %>%
group_by(GENDER) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_point()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_point()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_line()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_line() +
geom_point()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = AVG_HO, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(y = AVG_HO, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(y = AVG_HO, fill = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(y = AVG_HO, fill = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(y = HO, fill = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(y = HO, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5)) +
geom_histogram(color = HIPs)
df %>%
# group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5)) +
geom_histogram(color = HIPs)
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, binwidth = 5, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, binwidth = 5, color = HIPs)) +
geom_histogram(state = "count")
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5, color = HIPs)) +
geom_histogram()
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5, color = HIPs)) +
geom_histogram() +
geom_line(stat = "average")
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, binwidth = 5, color = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = HO, y = GENDER, binwidth = 5, color = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
df %>%
group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = HO, binwidth = 5, color = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
df %>%
# group_by(GENDER, HIPs) %>%
# mutate(AVG_HO = mean(HO, na.rm = TRUE)) %>%
ggplot(aes(x = GENDER, y = HO, binwidth = 5, color = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
ggplot(df, aes(x = GENDER, y = HO)) +
stat_summary(fun = "mean", geom = "bar")
ggplot(df, aes(x = GENDER, y = HO, color = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
ggplot(df, aes(x = GENDER, y = HO, fill = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
ggplot(df, aes(x = GENDER, y = HO, fill = HIPs)) +
geom_bar(stat = "summary", fun = "mean") +
geom_label("Hi")
ggplot(df, aes(x = GENDER, y = HO, fill = HIPs)) +
geom_bar(stat = "summary", fun = "mean") +
geom_label(aes("Hi"))
ggplot(df, aes(x = GENDER, y = HO, fill = HIPs)) +
geom_bar(stat = "summary", fun = "mean")
ggplot(df, aes(x = GENDER, y = HO)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge")
ggplot(df, aes(x = GENDER, y = HO, fill = HIPs)) +
geom_bar(stat = "summary", fun = "mean", position = "dodge")
table(df$Took_NSSE)
table(df$AcademicLevel)
?dplyr::recode
df <- data.frame()
df
df$Sex <- c("M","F")
df
df$Sex <- list("M","F")
df$Sex <- data.fra,e("M","F")
df$Sex <- data.frame("M","F")
df <- list()
df$Sex <- c("M","F")
df
dplyr::recode(df$Sex,
"M" = 1, "F" = 0)
?count
df <- tribble(
~name,    ~gender,   ~runs,
"Max",    "male",       10,
"Sandra", "female",      1,
"Susan",  "female",      4
)
# counts rows:
df %>% count(gender)
library(dplyr)
df <- tribble(
~name,    ~gender,   ~runs,
"Max",    "male",       10,
"Sandra", "female",      1,
"Susan",  "female",      4
)
# counts rows:
df %>% count(gender)
?count_if
??count_if
?summarise_if
View(df)
df$DistanceEdOnly <- c(1,0,0)
df$DistanceEdSome <- c(0,1,1)
head(df)
df %>%
group_by(gender) %>%
summarise(CountDistanceEdOnly = dplyr::sum(as.numeric(DistanceEdOnly)),
CountDistanceEdSome = dplyr::sum(as.numeric(DistanceEdSome))
)
df %>%
group_by(gender) %>%
summarise(CountDistanceEdOnly = sum(as.numeric(DistanceEdOnly)),
CountDistanceEdSome = sum(as.numeric(DistanceEdSome))
)
devtools::check()
case_when]
case_when
devtools::check()
devtools::check()
df %>% mutate(Line = "hello")
df %>% mutate(Line = case_when(gender == "male" ~ "hi", gender == "female" ~ "hola"))
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("htmltools")
install.packages("htmltools")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
