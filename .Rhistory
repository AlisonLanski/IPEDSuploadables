?select()
devtools::check()
source('~/Desktop/IPEDS-Uploadables/R/CompletionsStartingDf_DummyData.R')
df = startingdf
extracips = NULL
#prep extra cip codes
if (!is.null(extracips)) {
extracips_B <- extracips %>%
select(.data$Unitid, .data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd)
} else {
extracips_B <- data.frame("Unitid" = NA, "MajorNumber" = NA, "MajorCip" = NA,
"DegreeLevel" = NA, "DistanceEd" = NA)
}
partB <- df %>%
select(.data$Unitid, .data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
unique() %>%
#if we need to add the extra cips, do it here
bind_rows(extracips_B) %>%
#sort for easy viewing
arrange(.data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
#format for upload
transmute(UNITID = paste0("UNITID=", .data$Unitid),
SURVSECT = "SURVSECT=COM",
PART = "PART=B",
MAJORNUM = paste0("MAJORNUM=", .data$MajorNumber),
CIPCODE = paste0("CIPCODE=", .data$MajorCip),
AWLEVEL = paste0("AWLEVEL=", .data$DegreeLevel),
DistanceED = paste0("DistanceED=", .data$DistanceEd)
) %>%
filter(!is.na(UNITID))
View(partB)
#prep upload
partB <- df %>%
select(.data$Unitid, .data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
unique() %>%
#if we need to add the extra cips, do it here
bind_rows(extracips_B) %>%
filter(!is.na(UNITID)) %>%
#sort for easy viewing
arrange(.data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
#format for upload
transmute(UNITID = paste0("UNITID=", .data$Unitid),
SURVSECT = "SURVSECT=COM",
PART = "PART=B",
MAJORNUM = paste0("MAJORNUM=", .data$MajorNumber),
CIPCODE = paste0("CIPCODE=", .data$MajorCip),
AWLEVEL = paste0("AWLEVEL=", .data$DegreeLevel),
DistanceED = paste0("DistanceED=", .data$DistanceEd)
)
#prep upload
partB <- df %>%
select(.data$Unitid, .data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
unique() %>%
#if we need to add the extra cips, do it here
bind_rows(extracips_B) %>%
filter(!is.na(.data$Unitid)) %>%
#sort for easy viewing
arrange(.data$MajorNumber, .data$MajorCip, .data$DegreeLevel, .data$DistanceEd) %>%
#format for upload
transmute(UNITID = paste0("UNITID=", .data$Unitid),
SURVSECT = "SURVSECT=COM",
PART = "PART=B",
MAJORNUM = paste0("MAJORNUM=", .data$MajorNumber),
CIPCODE = paste0("CIPCODE=", .data$MajorCip),
AWLEVEL = paste0("AWLEVEL=", .data$DegreeLevel),
DistanceED = paste0("DistanceED=", .data$DistanceEd)
)
source('~/Desktop/IPEDS-Uploadables/R/make_com_part_C.R')
devtools::check()
?do.call
?list
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", ""))
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", "")) %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
output_path = getwd()
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", "")) %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
component = "Hi"
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", "")) %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", "")) %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
component = "All"
df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", "")) %>%
write.table(x = ., sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
output_path
test <- df %>%
purrr::map_df(~stringr::str_replace_all(., "^[:upper:]+[=]*", ""))
head(test)
write.table(x = df, sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE, append = append)
write.table(x = df, sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = FALSE, append = append)
write.table(x = df, sep = ",",
file = paste0(output_path, "Readable_", component, "_AllParts_", Sys.Date(), ".csv"),
quote = FALSE, row.names = FALSE, col.names = TRUE)#, append = append)
devtools::check()
devtools::check()
devtools::check()
students <- prep_com_data_frame(df = df)
if (!is.null(extracips)) {
extracips <- prep_com_data_frame(df = extracips)
}
if (toupper(part) == "ALL") {
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
}
part = "ALL"
if (toupper(part) == "ALL") {
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
}
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
source('~/Desktop/IPEDS-Uploadables/R/create_dummy_data_comp.R')
df <- create_dummy_data_comp()
students <- prep_com_data_frame(df = df)
if (!is.null(extracips)) {
extracips <- prep_com_data_frame(df = extracips)
}
if (toupper(part) == "ALL") {
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
}
if (toupper(part) %in% c("A", "B", "D")) {
do.call(paste0("make_com_part_", toupper(part)), list(students, extracips))
}
part
part = "D"
if (toupper(part) %in% c("A", "B", "D")) {
do.call(paste0("make_com_part_", toupper(part)), list(students, extracips))
}
View(extracips_B)
View(allcips)
extracips = NULL
if(!is.null(extracips)) {
#check extracips list for award levels not included in the startingdf
extralevel_D <- extracips %>%
dplyr::select(.data$Unitid, .data$DegreeLevel) %>%
unique() %>%
dplyr::filter(!(.data$DegreeLevel %in% df$DegreeLevel)) %>%
#add dummy data to any award levels found
dplyr::mutate(StudentId = "dummy_studentid",
RaceEthnicity = 1,
Sex = 1,
Birthdate = lubridate::ymd("1900-01-01"),
CountRE = 0,
CountSex = 0,
CountAge = 0
) %>%
#reorder for rbind
dplyr::select(.data$Unitid, .data$StudentId, dplyr::everything())
} else {
extralevel_D <- data.frame(Unitid = df$Unitid[1],
DegreeLevel = df$DegreeLevel[1],
StudentId = "dummy_studentid",
RaceEthnicity = 1,
Sex = 1,
Birthdate = lubridate::ymd("1900-01-01"),
CountRE = 0,
CountSex = 0,
CountAge = 0)
}
ipeds_unitid <- as.character(get_ipeds_unitid(df))
dummy_demographics <- data.frame(Unitid = ipeds_unitid,
StudentId = "dummy_studentid",
DegreeLevel = max(df$DegreeLevel),
RaceEthnicity = c(1:9),
Sex = c(1, 1, 1, 1, 1, 2, 2, 2, 2),
Age = c(15, 20, 25, 30, 35, 40, 45, 50, NA),
CountRE = 0,
CountSex = 0,
CountAge = 0,
stringsAsFactors = FALSE)
partD <- df %>%
dplyr::select(.data$Unitid, .data$StudentId, .data$DegreeLevel, .data$RaceEthnicity, .data$Sex, .data$Age) %>%
#add values which will be summed later
dplyr::mutate(CountRE = 1,
CountSex = 1,
CountAge = 1
) %>%
#add any extra award levels
dplyr::bind_rows(extralevel_D) %>%
#add dummy demographics to make sure the spread works correctly later
dplyr::bind_rows(dummy_demographics) %>%
#recode before removing duplicates per student
dplyr::mutate(CTLEVEL = dplyr::recode(.data$DegreeLevel,
`1` = 1,
`2` = 2,
`3` = 3,
`4` = 2,
`5` = 4,
`6` = 7,
`7` = 5,
`8` = 7,
`17` = 6,
`18` = 6,
`19` = 6,
.default = 9)
) %>%
dplyr::select(-.data$DegreeLevel) %>%
#one row per student per level per unitid (keep RE/Sex/Birthdate)
unique() %>%
#recode and spread RaceEthnicity to get IPEDS columns
dplyr::mutate(RaceEthnicity = recode(.data$RaceEthnicity,
`1` = "CRACE17",
`2` = "CRACE41",
`3` = "CRACE42",
`4` = "CRACE43",
`5` = "CRACE44",
`6` = "CRACE45",
`7` = "CRACE46",
`8` = "CRACE47",
`9` = "CRACE23",
.default = "ZRACEETH")
) %>%
tidyr::spread(key = .data$RaceEthnicity, value = .data$CountRE) %>%
#recode and spread Sex to get IPEDS columns
dplyr::mutate(Sex = recode(.data$Sex,
`1` = "CRACE15",
`2` = "CRACE16",
.default = "ZRACESEX")
) %>%
tidyr::spread(key = .data$Sex, value = .data$CountSex) %>%
#recode and spread Age to get IPEDS columns
dplyr::mutate(AgeGroup = case_when(
floor(.data$Age) < 18 ~ "AGE1",
floor(.data$Age) <= 24 ~ "AGE2",
floor(.data$Age) <= 39 ~ "AGE3",
floor(.data$Age) >= 40 ~ "AGE4",
is.na(.data$Age) ~ "AGE5",
TRUE ~ "AGE9"
)
) %>%
tidyr::spread(key = .data$AgeGroup, value = .data$CountAge) %>%
#aggregate and add counts in spread columns;
#extra award levels and dummy demographics have values of 0
dplyr::group_by(.data$Unitid, .data$CTLEVEL) %>%
dplyr::summarize(CRACE15 = sum(.data$CRACE15, na.rm = T),
CRACE16 = sum(.data$CRACE16, na.rm = T),
CRACE17 = sum(.data$CRACE17, na.rm = T),
CRACE41 = sum(.data$CRACE41, na.rm = T),
CRACE42 = sum(.data$CRACE42, na.rm = T),
CRACE43 = sum(.data$CRACE43, na.rm = T),
CRACE44 = sum(.data$CRACE44, na.rm = T),
CRACE45 = sum(.data$CRACE45, na.rm = T),
CRACE46 = sum(.data$CRACE46, na.rm = T),
CRACE47 = sum(.data$CRACE47, na.rm = T),
CRACE23 = sum(.data$CRACE23, na.rm = T),
AGE1 = sum(.data$AGE1, na.rm = T),
AGE2 = sum(.data$AGE2, na.rm = T),
AGE3 = sum(.data$AGE3, na.rm = T),
AGE4 = sum(.data$AGE4, na.rm = T),
AGE5 = sum(.data$AGE5, na.rm = T)
) %>%
dplyr::ungroup() %>%
#sort for easier viewing
dplyr::arrange(.data$CTLEVEL) %>%
#format for upload
dplyr::transmute(UNITID = paste0("UNITID=", .data$Unitid),
SURVSECT = "SURVSECT=COM",
PART = "PART=D",
CTLEVEL = paste0("CTLEVEL=", .data$CTLEVEL),
CRACE15 = paste0("CRACE15=", .data$CRACE15),
CRACE16 = paste0("CRACE16=", .data$CRACE16),
CRACE17 = paste0("CRACE17=", .data$CRACE17),
CRACE41 = paste0("CRACE41=", .data$CRACE41),
CRACE42 = paste0("CRACE42=", .data$CRACE42),
CRACE43 = paste0("CRACE43=", .data$CRACE43),
CRACE44 = paste0("CRACE44=", .data$CRACE44),
CRACE45 = paste0("CRACE45=", .data$CRACE45),
CRACE46 = paste0("CRACE46=", .data$CRACE46),
CRACE47 = paste0("CRACE47=", .data$CRACE47),
CRACE23 = paste0("CRACE23=", .data$CRACE23),
AGE1 = paste0("AGE1=", .data$AGE1),
AGE2 = paste0("AGE2=", .data$AGE2),
AGE3 = paste0("AGE3=", .data$AGE3),
AGE4 = paste0("AGE4=", .data$AGE4),
AGE5 = paste0("AGE5=", .data$AGE5)
)
df <- create_dummy_data_comp()
produce_com_report <- function(df, extracips = NULL, part = "ALL") {
students <- prep_com_data_frame(df = df)
if (!is.null(extracips)) {
extracips <- prep_com_data_frame(df = extracips)
}
if (toupper(part) == "ALL") {
make_com_part_A(df = students, extracips = extracips, output = "full")
make_com_part_B(df = students, extracips = extracips, output = "full")
make_com_part_C(df = students, output = "full")
make_com_part_D(df = students, extracips = extracips, output = "full")
}
if (toupper(part) %in% c("A", "B", "D")) {
do.call(paste0("make_com_part_", toupper(part)), list(students, extracips))
}
if (toupper(part) == "C") {
do.call(paste0("make_com_part_", toupper(part)), list(students))
}
}
produce_com_report(df = df, extracips = NULL, part = "D")
produce_com_report(df = df, extracips = NULL, part = "all")
devtools::load_all()
library(devtools)
produce_com_report(df = df, extracips = NULL, part = "all")
check()
document()
devtools::check()
?check
?usethis
??usethis
devtools::install_github("hadley/devtools")
devtools::install_github("hadley/devtools")
install_github("hadley/devtools")
library(IPEDSuploadables)
df <- openxlsx::read.xlsx("~/Downloads/GR_Variable_Definitions.xlsx")
View(df)
save(df, "../data/specs_GR.rda")
save(df, file = "../data/specs_GR.rda")
save(df, file = "./data/specs_GR.rda")
View(df)
df$ACCEPTABLE_VALUES
#figure out why striped isn't working when format = 'html'
load("data/specs_GR.rda")
#figure out why striped isn't working when format = 'html'
load("./data/specs_GR.rda")
load("~/Desktop/IPEDS-Uploadables/data/specs_GR.rda")
load("../data/specs_GR.rda")
#figure out why striped isn't working when format = 'html'
load("../data/specs_GR.rda")
specs_GR
test <- load("../data/specs_GR.rda")
library(IPEDS-uploadables)
